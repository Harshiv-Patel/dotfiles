" This must be first, because it changes other options as a side effect.
set nocompatible

" for changing defaults like 'mapleader'
if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif

" Change leader because the backslash is too far away
" That means all \x commands turn into ;x
" WARN: the mapleader has to be set before plugins are loaded.
let mapleader = ';'

" load all plugins using Vim-Plug
source ~/.vim/plugins.vim

" source dotfile repo settings
for fpath in split(glob('~/.vim/settings/*.vim'), '\n')
   exe 'source' fpath
endfor

" File Settings
"***********************************
set fileformat=unix
if has("autocmd")
   autocmd FileType text setlocal textwidth=79
   " jump to last known cursor position
   autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif
   " trim all trailing whitespace
   autocmd BufWritePre * :%s/\s\+$//e
   " open new buffers into a new tab (tip 1317)
   "autocmd BufAdd,BufNewFile * nested tab sball
   " update working directory to location of current file (tip 64)
   autocmd BufEnter * lcd %:p:h
   " add pyunit integration into python files (tip 280)
   autocmd FileType python
      \ setlocal makeprg=../alltests.py\ -q
   autocmd FileType python
      \ setlocal efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
   " allow for Sphinx '#:' comment delimiters in Python files
   autocmd FileType python
      \ setlocal comments+=:#:
   " auto-save file when switching tabs
   " autocmd FocusLost * :wa
   " --- XML settings ---
   " pretty xml formatting using TIDY
   autocmd FileType xml  setlocal ep=tidy\ --wrap\ 80\ -i\ --indent-spaces\ 4\ --indent-attributes\ y\ --input-xml\ y\ -\ 2>/dev/null
   autocmd FileType ant  setlocal ep=tidy\ --wrap\ 80\ -i\ --indent-spaces\ 4\ --indent-attributes\ y\ --input-xml\ y\ -\ 2>/dev/null
   autocmd FileType html setlocal ep=tidy\ --wrap\ 80\ -i\ --indent-spaces\ 4\ --indent-attributes\ y\ -\ 2>/dev/null
   " gradle syntax highlights
   autocmd BufNewFile,BufRead *.gradle set filetype=groovy
endif "has("autocmd")

" Python System Import Jumption w/ 'gf'
"***********************************
python << EOF
import os
import sys
import vim
for p in sys.path:
   if os.path.isdir(p):
      vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
EOF

" Edit Shortcuts
   "find (select word under cursor)
   nnoremap <C-f> /<C-R><C-W>
   inoremap <C-f> <C-O>/<C-R><C-W>
   "find (highlighted text)
   vnoremap <C-f> y/<C-R>=escape(@", '\\/.*$^~[]')<cr>
   vnoremap *     y/<C-R>=escape(@", '\\/.*$^~[]')<cr>
   "reverse find (highlighted text)
   vnoremap #     y?<C-R>=escape(@", '\\/.*$^~[]')<cr>
   "remove highlights after find
   noremap  <silent><Space> :noh<bar>:echo ""<cr>
   "toggle spelling
   nnoremap <silent><F7> :setlocal spell!<cr>
   vnoremap <silent><F7> <C-C>:setlocal spell!<cr>gv
   inoremap <silent><F7> <C-O>:setlocal spell!<cr>
   "auto-wrap text lines
   nnoremap g<space> gqq
   vnoremap g<space> gq

" Redo Shortcuts
   "redo last command on all selected lines
   vnoremap . :normal .<CR>

" Nerd Commenter
"***********************************
" options
let NERDSpaceDelims=1
let NERDDefaultNesting=0
" toggle comment current line or selection
noremap  <C-e> :call NERDComment(0,"toggle")<cr>j
inoremap <C-e> <C-O>:call NERDComment(0,"toggle")<cr>
vnoremap <C-e> <C-C>:call NERDComment(1,"toggle")<cr>j
" change default comments for dosbatch files
autocmd FileType dosbatch autocmd VimEnter * execute "normal \<Plug>NERDCommenterAltDelims"

" Syntax File Settings
"***********************************
let python_highlight_all=1       " turn on all python highlights

" Session Plugin Settings
"***********************************
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize
noremap <F1> <C-C>:SessionList<cr>
noremap <F2> <C-C>:SessionOpenLast<cr>
noremap <F3> <C-C>:SessionSave<cr>
noremap <F4> <C-C>:SessionSaveAs<cr>

" LocalVimRC settings
"***********************************
let g:localvimrc_ask = 0

function! SetupPython()
    " Here, you can have the final say on what is set.  So
    " fixup any settings you don't like.
    setlocal softtabstop=3
    setlocal tabstop=3
    setlocal shiftwidth=3
endfunction
command! -bar SetupPython call SetupPython()
